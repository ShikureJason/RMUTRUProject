//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""OnGameplay"",
            ""id"": ""ce9415b2-edf5-43ed-b0c5-81a0de59e4a3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bb12d3f7-6a71-400a-a660-9357df52d30f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""84746b44-fab3-4b3c-8d2c-bf04a7cdf875"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""bbe7a2c3-9a9e-4937-9daa-a8904d44a97f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""13f4d9e0-4cb9-4409-9f22-da4f82374127"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlCam"",
                    ""type"": ""Button"",
                    ""id"": ""99761318-0498-4d3a-aa05-a87d55fe020e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCam"",
                    ""type"": ""Value"",
                    ""id"": ""792dd71a-5b93-4ca5-8bdd-33c1c31ed95c"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EscapeGame"",
                    ""type"": ""Button"",
                    ""id"": ""b2d93d9d-49ba-4b8d-86ba-0ccbfddb96c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""00ca640b-d935-4593-8157-c05846ea39b3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""320bffee-a40b-4347-ac70-c210eb8bc73a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1c5327b5-f71c-4f60-99c7-4e737386f1d1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d2581a9b-1d11-4566-b27d-b92aff5fabbc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2e46982e-44cc-431b-9f0b-c11910bf467a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""370a11ef-55b6-4273-b98e-33b819ffe99d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b13be229-ec56-427d-8087-1a1dfa0a2d94"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0965e931-d533-43e0-9e9e-19f9199b07c8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e9fbefc-19b7-4275-b1a7-e3abe5d32d49"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ControlCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c31dbe1f-61a7-4096-822d-a647a08d3920"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=2,y=2)"",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""RotateCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c373ea24-309b-45c5-a092-96ea2db4486a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EscapeGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnDialogue"",
            ""id"": ""64f7a1b8-caf1-4ea1-b6fd-7955414ba0ce"",
            ""actions"": [
                {
                    ""name"": ""NextDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""0c3d9254-a299-46cc-91b1-b2d2e7af1913"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40a38c44-76c6-45b4-995d-bee0fa915efc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""NextDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnMenu"",
            ""id"": ""e20f5950-7917-4fb4-9406-5b3ba886844d"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""d10f66c9-b755-4214-8642-74f806562f89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d02a41ac-c418-4174-b8c4-b3f69208c381"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // OnGameplay
        m_OnGameplay = asset.FindActionMap("OnGameplay", throwIfNotFound: true);
        m_OnGameplay_Move = m_OnGameplay.FindAction("Move", throwIfNotFound: true);
        m_OnGameplay_Jump = m_OnGameplay.FindAction("Jump", throwIfNotFound: true);
        m_OnGameplay_Sprint = m_OnGameplay.FindAction("Sprint", throwIfNotFound: true);
        m_OnGameplay_Interact = m_OnGameplay.FindAction("Interact", throwIfNotFound: true);
        m_OnGameplay_ControlCam = m_OnGameplay.FindAction("ControlCam", throwIfNotFound: true);
        m_OnGameplay_RotateCam = m_OnGameplay.FindAction("RotateCam", throwIfNotFound: true);
        m_OnGameplay_EscapeGame = m_OnGameplay.FindAction("EscapeGame", throwIfNotFound: true);
        // OnDialogue
        m_OnDialogue = asset.FindActionMap("OnDialogue", throwIfNotFound: true);
        m_OnDialogue_NextDialogue = m_OnDialogue.FindAction("NextDialogue", throwIfNotFound: true);
        // OnMenu
        m_OnMenu = asset.FindActionMap("OnMenu", throwIfNotFound: true);
        m_OnMenu_Escape = m_OnMenu.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnGameplay
    private readonly InputActionMap m_OnGameplay;
    private List<IOnGameplayActions> m_OnGameplayActionsCallbackInterfaces = new List<IOnGameplayActions>();
    private readonly InputAction m_OnGameplay_Move;
    private readonly InputAction m_OnGameplay_Jump;
    private readonly InputAction m_OnGameplay_Sprint;
    private readonly InputAction m_OnGameplay_Interact;
    private readonly InputAction m_OnGameplay_ControlCam;
    private readonly InputAction m_OnGameplay_RotateCam;
    private readonly InputAction m_OnGameplay_EscapeGame;
    public struct OnGameplayActions
    {
        private @InputManager m_Wrapper;
        public OnGameplayActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_OnGameplay_Move;
        public InputAction @Jump => m_Wrapper.m_OnGameplay_Jump;
        public InputAction @Sprint => m_Wrapper.m_OnGameplay_Sprint;
        public InputAction @Interact => m_Wrapper.m_OnGameplay_Interact;
        public InputAction @ControlCam => m_Wrapper.m_OnGameplay_ControlCam;
        public InputAction @RotateCam => m_Wrapper.m_OnGameplay_RotateCam;
        public InputAction @EscapeGame => m_Wrapper.m_OnGameplay_EscapeGame;
        public InputActionMap Get() { return m_Wrapper.m_OnGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IOnGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_OnGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnGameplayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @ControlCam.started += instance.OnControlCam;
            @ControlCam.performed += instance.OnControlCam;
            @ControlCam.canceled += instance.OnControlCam;
            @RotateCam.started += instance.OnRotateCam;
            @RotateCam.performed += instance.OnRotateCam;
            @RotateCam.canceled += instance.OnRotateCam;
            @EscapeGame.started += instance.OnEscapeGame;
            @EscapeGame.performed += instance.OnEscapeGame;
            @EscapeGame.canceled += instance.OnEscapeGame;
        }

        private void UnregisterCallbacks(IOnGameplayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @ControlCam.started -= instance.OnControlCam;
            @ControlCam.performed -= instance.OnControlCam;
            @ControlCam.canceled -= instance.OnControlCam;
            @RotateCam.started -= instance.OnRotateCam;
            @RotateCam.performed -= instance.OnRotateCam;
            @RotateCam.canceled -= instance.OnRotateCam;
            @EscapeGame.started -= instance.OnEscapeGame;
            @EscapeGame.performed -= instance.OnEscapeGame;
            @EscapeGame.canceled -= instance.OnEscapeGame;
        }

        public void RemoveCallbacks(IOnGameplayActions instance)
        {
            if (m_Wrapper.m_OnGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_OnGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnGameplayActions @OnGameplay => new OnGameplayActions(this);

    // OnDialogue
    private readonly InputActionMap m_OnDialogue;
    private List<IOnDialogueActions> m_OnDialogueActionsCallbackInterfaces = new List<IOnDialogueActions>();
    private readonly InputAction m_OnDialogue_NextDialogue;
    public struct OnDialogueActions
    {
        private @InputManager m_Wrapper;
        public OnDialogueActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextDialogue => m_Wrapper.m_OnDialogue_NextDialogue;
        public InputActionMap Get() { return m_Wrapper.m_OnDialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnDialogueActions set) { return set.Get(); }
        public void AddCallbacks(IOnDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_OnDialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnDialogueActionsCallbackInterfaces.Add(instance);
            @NextDialogue.started += instance.OnNextDialogue;
            @NextDialogue.performed += instance.OnNextDialogue;
            @NextDialogue.canceled += instance.OnNextDialogue;
        }

        private void UnregisterCallbacks(IOnDialogueActions instance)
        {
            @NextDialogue.started -= instance.OnNextDialogue;
            @NextDialogue.performed -= instance.OnNextDialogue;
            @NextDialogue.canceled -= instance.OnNextDialogue;
        }

        public void RemoveCallbacks(IOnDialogueActions instance)
        {
            if (m_Wrapper.m_OnDialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_OnDialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnDialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnDialogueActions @OnDialogue => new OnDialogueActions(this);

    // OnMenu
    private readonly InputActionMap m_OnMenu;
    private List<IOnMenuActions> m_OnMenuActionsCallbackInterfaces = new List<IOnMenuActions>();
    private readonly InputAction m_OnMenu_Escape;
    public struct OnMenuActions
    {
        private @InputManager m_Wrapper;
        public OnMenuActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_OnMenu_Escape;
        public InputActionMap Get() { return m_Wrapper.m_OnMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnMenuActions set) { return set.Get(); }
        public void AddCallbacks(IOnMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_OnMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnMenuActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IOnMenuActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IOnMenuActions instance)
        {
            if (m_Wrapper.m_OnMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_OnMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnMenuActions @OnMenu => new OnMenuActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IOnGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnControlCam(InputAction.CallbackContext context);
        void OnRotateCam(InputAction.CallbackContext context);
        void OnEscapeGame(InputAction.CallbackContext context);
    }
    public interface IOnDialogueActions
    {
        void OnNextDialogue(InputAction.CallbackContext context);
    }
    public interface IOnMenuActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
}
